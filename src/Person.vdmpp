class Person
	types
		public String = seq of char;
		
		-- The status of the person, based on its work. --
		public Status = <Unemployed> | <Student> | <Employed> | <Undefined>;
		
	instance variables
		
		-- The name of the Person. --
		private name : String;
		
		-- The current Work of the Person. --
		private currentWork : [Work] := nil;
		
		-- A set of all the previous works of the Person. --
		private pastWorks : set of Work := {};
		private status : Status := <Undefined>;
		
		-- A set of the all skills the Person has. --
		private skills : set of Skill := {};
		
		-- A set of all the previous Schools the Person frequented. --
		private education : set of Education := {};
		private description : String := "";
		
		-- A set of all the languages the Person has added to its LinkedIn Profile. --
		private languages : set of Language := {};
		
		-- A set of all the interests the Person has added to its LinkedIn Profile. --
		private interests : set of Interest := {};
		private cv : String;
		
		-- The connections of a Person, as in, all of the other Persons he "follows". --
		private connections : set of Person := {};
		
		inv {currentWork} inter pastWorks = {} or {currentWork} = {nil} or pastWorks = {}
	operations
	
		-- Creates a new Person given its name. --
		public Person: String ==> Person
      Person(x) == (name := x; return self);
						      
		--START GETS--
		
		-- Returns the name of the Person. --
		public getName : () ==> String
			getName() == (return name);
			
		-- Returns the current work of the person. --
		public getCurrentWork : () ==> Work
			getCurrentWork() == (return currentWork);
			
		-- Returns all of the Person's previous works. --	
		public getPastWorks : () ==> set of Work
			getPastWorks() == (return pastWorks);
			
		-- Returns a work based on its name, from the set of pastWorks of the Person. --
		public getWorkByName : String ==> [Work]
			getWorkByName(l) ==
			(
				for all work in set pastWorks do
					if l = work.getCompany().getName()
						then return work;
				return nil
			);
			
		-- Returns the status of the Person. --
		public getStatus : () ==> Status
			getStatus() == (return status);
			
		-- Returns all of the Person's skills. 
		public getSkills : () ==> set of Skill
			getSkills() == (return skills);
			
		-- Returns a skill based on its name, from the set of skills of the Person. --
		public getSkillByName : String ==> [Skill]
			getSkillByName(l) ==
			(
				for all skill in set skills do
					if l = skill.getName()
						then return skill;
				return nil
			);
			
		-- Returns all of the Person's schools he frequented. --
		public getEducation : () ==> set of Education
			getEducation() == (return education);
			
		-- Returns an education based on its name, from the set of educations of the Person. --
		public getEducationByName : String ==> [Education]
			getEducationByName(l) ==
			(
				for all e in set education do
				(
					if l = e.getCompany().getName()
						then return e
				);
				return nil
			);
			
		-- Returns a description of the Person. --
		public getDescription : () ==> String
			getDescription() == (return description);
			
		-- Returns all of the Person's languages. --
		public getLanguages : () ==> set of Language
			getLanguages() == (return languages);
			
		-- Returns a language based on its name, from the set of languages of the Person. --
		public getLanguageByName : String ==> [Language]
			getLanguageByName(l) ==
			(
				for all language in set languages do
					if l = language.getName()
						then return language;
				return nil
			);
			
		-- Returns all of the Person's interests. --
		public getInterests : () ==> set of Interest
			getInterests() == (return interests);
		
		-- Returns an interest based on its name, from the set of interests of the Person. --
		public getInterestByName : String ==> [Interest]
			getInterestByName(i) ==
			(
				dcl t : Interest := new Interest();
				for all interest in set interests do
					(if i = interest.getName()
						then return interest);
				return nil
			);
			
		-- Returns the Person's CV. --
		public getCV : () ==> String
			getCV() == (return cv);
			
		-- Returns all of the Person's connections. --
		public getConnections : () ==> set of Person
			getConnections() == (return connections);
		--END GETS--
		
		--START SETS--
		
		-- Changes the Person's status. --
		-- If the person goes from being employed, to unemployed, the current work ends and it's added to the past works set. --
		public setStatus : Status ==> ()
			setStatus(s) ==
			(
				if (status = <Employed> and s = <Unemployed>)
				then
				(
					dcl data : Date := new Date(2017,12,30); -- ATÉ AO PEITO
					dcl temp : Work := currentWork;
					currentWork := nil;
					temp.setEndDate(data);
					pastWorks:= pastWorks union {temp}
				);
				
				status := s;
				return
			);
			
		-- Changes the Person's description. --
		public setDescription : String ==> ()
			setDescription(d) == (description := d; return);
			
		-- Changes the Person's CV. --
		public setCV : String ==> ()
			setCV(c) == (cv := c; return);
			
		public setCurrentWork : Work ==> ()
			setCurrentWork(w) == (currentWork := w; status := <Employed>; return)
			pre status <> <Employed> and w not in set pastWorks;
		--END SETS--
		
		--START ADDS--
		
		-- Adds a past work to the existent set. --
		-- It checks if the work is not in the set and if it was indeed added. --
		public addPastWorks : Work ==> ()
			addPastWorks(w) == (pastWorks := pastWorks union {w}; return)
			pre w not in set pastWorks and w <> currentWork
			post pastWorks = pastWorks~ union {w};
		
		-- Adds a skill to the existent set. --
		-- It checks if the skill is not in the set and if it was indeed added. --
		public addSkill : Skill ==> ()
			addSkill(s) == (skills := skills union {s}; return)
			pre s not in set skills
			post  skills = skills~ union {s};
		
		
		-- Adds a education to the existent set. --
		-- It checks if the education is not in the set and if it was indeed added. --
		public addEducation : Education ==> ()
			addEducation(e) == (education := education union {e}; return)
			pre e not in set education
			post education = education~ union {e};
		
		
		-- Adds a language to the existent set. --
		-- It checks if the language is not in the set and if it was indeed added. --
		public addLanguage : Language ==> ()
			addLanguage(l) == (languages := languages union {l}; return)
			pre l not in set languages
			post languages = languages~ union {l};
			
		-- Adds an interest to the existent set. --
		-- It checks if the interest is not in the set and if it was indeed added. --
		public addInterest : Interest ==> ()
			addInterest(i) == (interests := interests union {i}; return)
			pre i not in set interests
			post interests = interests~ union {i};
		
		-- Adds a connection to the existent set. --
		-- It checks if the connection is not in the set and if it was indeed added. --
		public addConnection : Person ==> ()
			addConnection(c) == (connections := connections union {c}; return)
			pre c not in set connections and c <> self
			post connections = connections~ union {c};
		--END ADDS--
		
		--START REMOVES--
		
		-- Removes a past work from the existent set. --
		-- It checks if the work is in the set and if it was indeed removed. --
		public removePastWork : Work ==> ()
			removePastWork(w) == (pastWorks := pastWorks \ {w}; return)
			pre w in set pastWorks
			post {} = pastWorks inter {w};
		
		-- Removes a skill from the existent set. --
		-- It checks if the skill is in the set and if it was indeed removed. --
		public removeSkill : Skill ==> ()
			removeSkill(s) == (skills := skills \ {s}; return)
			pre s in set skills
			post {} = skills inter {s};
		
		-- Removes a education from the existent set. --
		-- It checks if the education is in the set and if it was indeed removed. --	
		public removeEducation : Education ==> ()
			removeEducation(e) == (education := education \ {e}; return)
			pre e in set education
			post {} = education inter {e};
		
		-- Removes a language from the existent set. --
		-- It checks if the language is in the set and if it was indeed removed. --
		public removeLanguage : Language ==> ()
			removeLanguage(l) == (languages := languages \ {l}; return)
			pre l in set languages
			post {} = languages inter {l};
		
		-- Removes an interest from the existent set. --
		-- It checks if the interest is in the set and if it was indeed removed. --	
		public removeInterest : Interest ==> ()
			removeInterest(i) == (interests := interests \ {i}; return)
			pre i in set interests
			post {} = interests inter {};
		
		-- Removes a connection from the existent set. --
		-- It checks if the connection is in the set and if it was indeed removed. --
		public removeConnection : Person ==> ()
			removeConnection(c) == (connections := connections \ {c}; return)
			pre c in set connections and c <> self
			post {} = connections inter {};
		--END REMOVES
		
		-- Returns all of the common contacts between two persons. --
		public commonContacts : Person ==> set of Person
			commonContacts(p) ==
			(
				return p.getConnections() inter connections
			)
			pre p <> self;
		
		-- Returns the distance from one Person to the other. --
		public distance : Person ==> int
			distance(p) ==
			(
				dcl distancia : int := 0;
				dcl temp : set of Person := connections;
				dcl visited : set of Person := {};
				
				while p not in set visited do
				(
					distancia := distancia + 1;
					
					for all t in set temp do
					(
						visited := visited union {t};
						temp := temp union t.getConnections() \ visited
					);
					if (card temp = 0)
						then return -1;
						
					return distancia
				);
				
			)
			pre p <> self;
end Person

class PersonTest is subclass of TestCaseLinkedIn
	instance variables
		pI : Person := new Person("Jose Miguel Botelho Mendes");
		pF : Person := new Person("Daniel da Silva Reis");
		p1 : Person := new Person("Luis Figueiredo"); 
		p2 : Person := new Person("Diogo Moura");
		p3 : Person := new Person("Antonio Ramadas");
		p4 : Person := new Person("Pedro Castro");
		p5 : Person := new Person("Paulino");
		p6 : Person := new Person("Cigano do Codigo");
		p7 : Person := new Person("teste123");
		
		cF : Company := new Company("Faculdade de Engenharia da Universidade do Porto", "Formar Pessoas", "Rua Doutor Roberto Frias", <School>);
		cI : Company := new Company("Autoridade Tributaria e Aduaneira", "Recolher Impostos", "Avenida da Liberdade, nº40, 4400-200", <Public>);
		
		birthdayDate : Date := new Date(1995, 11, 06);
		dF : Date := new Date(2016, 10, 30);
		dI : Date := new Date(2016, 10, 31);
		
		wF : Work := new Work("Balconista", dF, cF);
		wFF : Work := new Work("CEO", dF, cF);
		
		wI : Work := new Work("Balconista", dF, cI);
		wII : Work := new Work("CEO", dF, cI);
		
		s1 : Skill := new Skill("JAVA", 10);
		s2 : Skill := new Skill("Alloy", 2);
		s3 : Skill := new Skill("C", 5);
		s4 : Skill := new Skill("OpenGL", 4);
		
		c1 : Company := new Company("Faculdade de Engenharia da Universidade do Porto", "Formar Pessoas", "Rua Doutor Roberto Frias", <School>);
		c2 : Company := new Company("Autoridade Tributaria e Aduaneira", "Recolher Impostos", "Avenida da Liberdade, nº40, 4400-200", <School>);
		
		d1 : Date := new Date(2016, 10, 30);
		d2 : Date := new Date(2016, 10, 31);
		
		eF : Education := new Education(<Graduate>, c1, d2, "Mestrado Integrado Em Engenharia Informatica e Computacao");
		eI : Education := new Education(<UnderGrad>, c2, d2, "Estagio Final");
		
		l1 : Language := new Language("Portuguese", 10);
		l2 : Language := new Language("English", 8);
		l3 : Language := new Language("Spanish", 6);
		l4 : Language := new Language("French", 2);
		
		i1 : Interest := new Interest("Requirements Documents");
		i2 : Interest := new Interest("GTA V");
		i3 : Interest := new Interest("GTA IV");
		i4 : Interest := new Interest("GTA III");
		i5 : Interest := new Interest("GTA II");
		i6 : Interest := new Interest("GTA I");
	operations
		
		-- START GETS --
		private testGetName: () ==> ()
	    testGetName() ==
	    (
	      assertEqual(pI.getName(), "Jose Miguel Botelho Mendes");
	      assertEqual(pF.getName(), "Daniel da Silva Reis")
	    );
	  	
	  private testGetCurrentWork: () ==> ()
	  	testGetCurrentWork() ==
	  	(
	  		assertEqual(pI.getCurrentWork(), wII);
	  		assertEqual(pF.getCurrentWork(), wFF)
	  	);
	  	
	  private testGetPastWorks : () ==> ()
	  	testGetPastWorks() ==
	  	(
	  		assertEqual(pI.getPastWorks(), {wI})
	  	);
	  	
	  private testGetStatus : () ==> ()
	  	testGetStatus() ==
	  	(
	  		assertEqual(pI.getStatus(), <Employed>);
	  		assertEqual(pF.getStatus(), <Unemployed>)
	  	);
	  	
	  private testGetPastWorksAfterUnemployed : () ==> () 
	  	testGetPastWorksAfterUnemployed() ==
	  	(
	  		dcl temp : set of Work := {};
	  		temp := temp union {wF};
	  		temp := temp union {wFF};
	  		assertEqual(pF.getPastWorks(), temp)
	  	);
	  
	  private testGetSkills : () ==> ()
	  	testGetSkills() ==
	  	(
	  		dcl temp : set of Skill := {};
	  		temp := temp union {s1};
	  		temp := temp union {s2};
	  		assertEqual(pI.getSkills(), temp)
	  	);
	  	
	  private testGetEducation : () ==> ()
	  	testGetEducation() ==
	  	(
	  		assertEqual(pI.getEducation(), {eI})
	  	);
	  
	  private testGetDescription : () ==> ()
	  	testGetDescription() ==
	  	(
	  		assertEqual(pI.getDescription(), "Rei do GTA V");
	  		assertEqual(pF.getDescription(), "Noob do GTA V")
	  	);
	  
	  private testGetLanguages : () ==> ()
	  	testGetLanguages() ==
	  	(
	  		dcl temp : set of Language := {};
	  		temp := temp union {l1};
	  		temp := temp union {l2};
	  		assertEqual(pI.getLanguages(), temp)
	  	);
	  
	  private testGetInterests : () ==> ()
	  	testGetInterests() ==
	  	(
	  		dcl temp : set of Interest := {};
	  		temp := temp union {i1};
	  		temp := temp union {i2};
	  		temp := temp union {i3};
	  		assertEqual(pI.getInterests(), temp)
	  	);
	  	
	  private testGetCV : () ==> ()
	  	testGetCV() ==
	  	(
	  		assertEqual(pI.getCV(), "Trolhinha Rustico numero 1");
	  		assertEqual(pF.getCV(), "Trolhinha Rustico numero 2")
	  	);
	  
	  private testGetConnections : () ==> ()
	  	testGetConnections() ==
	  	(
	  		dcl temp : set of Person := {};
	  		temp := temp union {p1};
	  		temp := temp union {p2};
	  		assertEqual(pI.getConnections(), temp)
	  	);
	  	
	  private testGets: () ==> ()
	  	testGets() ==
	  	(
	  		assertEqual(pI.getSkillByName("JAVA"),s1);
	  		assertEqual(pI.getLanguageByName("English"),l2);
	  		assertEqual(pI.getInterestByName("GTA IV"), i3);
	  		assertEqual(pI.getEducationByName("Autoridade Tributaria e Aduaneira"),eI);
	  		assertEqual(pI.getWorkByName("Autoridade Tributaria e Aduaneira"),wI)
	  	);
	  -- END GETS --
	  
	  -- START SETS --
	  private testSetStatus : () ==> ()
	  	testSetStatus() ==
	  	(
	  		pI.setStatus(<Employed>);
	  		pF.setStatus(<Employed>);
	  		pF.setStatus(<Unemployed>)
	  	);
	  	
	  private testSetDescription : () ==> ()
	  	testSetDescription() ==
	  	(
	  		pI.setDescription("Rei do GTA V");
	  		pF.setDescription("Noob do GTA V")
	  	);
	  
	  private testSetCV : () ==> ()
	  	testSetCV() ==
	  	(
	  		pI.setCV("Trolhinha Rustico numero 1");
	  		pF.setCV("Trolhinha Rustico numero 2")
	  	);
	  	
	  private testSetCurrentWork : () ==> ()
	  	testSetCurrentWork() ==
	  	(
	  		pI.setCurrentWork(wII);
	  		pF.setCurrentWork(wFF)
	  	);
		--END SETS--
		
		--START ADDS--
		private testAddPastWorks : () ==> ()
			testAddPastWorks() ==
			(
				pI.addPastWorks(wI);
				pF.addPastWorks(wF)
			);
			
		private testAddSkill : () ==> ()
			testAddSkill() == 
			(
				pI.addSkill(s1);
				pI.addSkill(s2);
				pF.addSkill(s3);
				pF.addSkill(s4)
			);
			
		private testAddEducation : () ==> ()
			testAddEducation() ==
			(
				pI.addEducation(eI);
				pF.addEducation(eF)
			);
			
		private testAddLanguage : () ==> ()
			testAddLanguage() ==
			(
				pI.addLanguage(l1);
				pI.addLanguage(l2);
				pF.addLanguage(l3);
				pF.addLanguage(l4)
			);
			
		private testAddInterest : () ==> ()
			testAddInterest() ==
			(
				pI.addInterest(i1);
				pI.addInterest(i2);
				pI.addInterest(i3);
				pF.addInterest(i4);
				pF.addInterest(i5);
				pF.addInterest(i6)
			);
			
		private testAddConnection : () ==> ()
			testAddConnection() ==
			(
				pI.addConnection(p1);
				pI.addConnection(p2);
				pI.addConnection(p7);
				pF.addConnection(p3);
				pF.addConnection(p4);
				p1.addConnection(p5);
				p1.addConnection(p6);
				p4.addConnection(p6)
			);
		-- END ADDS --
	    
	  -- START REMOVES --
	  
	  private testRemovePastWork : () ==> ()
	  	testRemovePastWork() ==
	  	(
	  		pI.removePastWork(wI);
	  		assertEqual(pI.getPastWorks(), {})
	  	);
	  	
	  private testRemoveSkill : () ==> ()
	  	testRemoveSkill() ==
	  	(
	  		pI.removeSkill(s2);
	  		assertEqual(pI.getSkills(), {s1})
	  	);
		
		private testRemoveEducation : () ==> ()
			testRemoveEducation() ==
			(
				pI.removeEducation(eI);
				assertEqual(pI.getEducation(), {})
			);
			
		private testRemoveLanguage : () ==> ()
			testRemoveLanguage() ==
			(
				pI.removeLanguage(l1);
				assertEqual(pI.getLanguages(), {l2})
			);
		
		private testRemoveInterest : () ==> ()
			testRemoveInterest() ==
			(
				pI.removeInterest(i1);
				pI.removeInterest(i2);
				assertEqual(pI.getInterests(), {i3})
			);
			
		private testRemoveConnection : () ==> ()
			testRemoveConnection() ==
			(
				dcl temp : set of Person := {};
				pI.removeConnection(p7);
				temp := temp union {p1};
				temp := temp union {p2};
				assertEqual(pI.getConnections(), temp);
			);
		--END REMOVES
		
		private testCommonContacts : () ==> ()
			testCommonContacts() ==
			(
				assertEqual(p1.commonContacts(p4), {p6})
			); 
	    
    public static main: () ==> ()
	    main() ==
	    (
	    	dcl teste : PersonTest := new PersonTest();
	      teste.testGetName();
	      teste.testSetDescription();
	      teste.testSetCV();
	      teste.testSetCurrentWork();
	      teste.testAddPastWorks();
	      teste.testAddSkill();
	      teste.testAddEducation();
	      teste.testAddLanguage();
	      teste.testAddInterest();
	      teste.testAddConnection();
	      teste.testGets();
	      teste.testGetDescription();
	      teste.testGetCV();
	      teste.testGetCurrentWork();
	      teste.testGetPastWorks();
	      teste.testGetSkills();
	      teste.testGetEducation();
	      teste.testGetLanguages();
	      teste.testGetInterests();
	      teste.testRemoveConnection();
	      teste.testGetConnections();
	      teste.testSetStatus();
	      teste.testGetStatus();
	      teste.testGetPastWorksAfterUnemployed();
	      teste.testCommonContacts();
	      teste.testRemovePastWork();
	      teste.testRemoveSkill();
	      teste.testRemoveEducation();
	      teste.testRemoveLanguage();
	      teste.testRemoveInterest()
	    );
end PersonTest