class Skill
	types
		public String = seq of char;
	
	instance variables
		private name : String;
		
		-- The user's ability in the Skill. It varies from 1 to 10. --
		private ability : nat;
	
	operations
	
		-- Creates a new Skill, given its name and the user's ability in it. --
		public Skill: String * nat ==> Skill
      Skill(n, a) == (name := n; ability := a; return self)
      pre a > 0 and a <= 10 and n <> [];
		--START GETS--
		
		-- Returns the name of the Skill. --
		public getName : () ==> String
			getName() == (return name);	
			
		-- Returns the user's ability in the Skill. --
		public getAbility : () ==> nat
			getAbility() == (return ability);
		--END GETS--
		
		--START SETS--
		
		-- Changes the user's ability in the Skill. --
		public setAbility : nat ==> ()
			setAbility(a) == (ability := a; return)
			pre a > 0 and a <= 10;
		--END SETS--
end Skill

class SkillTest is subclass of TestCaseLinkedIn
	
	instance variables
		sI : Skill := new Skill("JAVA", 10);
		sF : Skill := new Skill("Alloy", 2);
		
	operations
		
		-- START GETS --
		private testGetName: () ==> ()
	    testGetName() ==
	    (
	      assertEqual(sI.getName(), "JAVA");
	      assertEqual(sF.getName(), "Alloy");
	    );
	  private testGetAbility: () ==> ()
	    testGetAbility() ==
	    (
	      assertEqual(sI.getAbility(), 10);
	      assertEqual(sF.getAbility(), 2);
	    );
	  -- END GETS --
	  
	  -- START SETS --
	  private testSetAbility: () ==> ()
	  	testSetAbility() ==
	  	(
	  		assertEqual(sI.getAbility(), 10);
	      assertEqual(sF.getAbility(), 2);
	      
	      sI.setAbility(8);
	      sF.setAbility(1);
	      
	      assertEqual(sI.getAbility(), 8);
	      assertEqual(sF.getAbility(), 1);
	  	);
	  -- END SETS --
	    
    public static main: () ==> ()
	    main() ==
	    (
	    	dcl teste : SkillTest := new SkillTest();
	      teste.testGetName();
	      teste.testGetAbility();
	      teste.testSetAbility();
	    );
		
end SkillTest