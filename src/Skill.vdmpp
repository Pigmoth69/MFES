class Skill
	types
		public String = seq of char;
	
	instance variables
		private name : String;
		private hability : nat;
	
	operations
		public Skill: String * nat ==> Skill
						      Skill(n, h) == (name := n; hability := h; return self)
						      pre h > 0 and h <= 10 and n <> [];
		--START GETS--
		public getName : () ==> String
										getName() == (return name);	
		public getHability : () ==> nat
										getHability() == (return hability);
		--END GETS--
		
		--START SETS--
		public setHability : nat ==> ()
												setHability(h) == (hability := h; return)
												pre h > 0 and h <= 10;
		--END SETS--
end Skill

class SkillTest is subclass of TestCaseLinkedIn
	
	instance variables
		sI : Skill := new Skill("JAVA", 10);
		sF : Skill := new Skill("Alloy", 2);
		
	operations
		
		-- START GETS --
		private testGetName: () ==> ()
	    testGetName() ==
	    (
	      assertEqual(sI.getName(), "JAVA");
	      assertEqual(sF.getName(), "Alloy");
	    );
	  private testGetHability: () ==> ()
	    testGetHability() ==
	    (
	      assertEqual(sI.getHability(), 10);
	      assertEqual(sF.getHability(), 2);
	    );
	  -- END GETS --
	  
	  -- START SETS --
	  private testSetHability: () ==> ()
	  	testSetHability() ==
	  	(
	  		assertEqual(sI.getHability(), 10);
	      assertEqual(sF.getHability(), 2);
	      
	      sI.setHability(8);
	      sF.setHability(1);
	      
	      assertEqual(sI.getHability(), 8);
	      assertEqual(sF.getHability(), 1);
	  	);
	  -- END SETS --
	    
    public static main: () ==> ()
	    main() ==
	    (
	    	dcl teste : SkillTest := new SkillTest();
	      teste.testGetName();
	      teste.testGetHability();
	      teste.testSetHability();
	    );
		
end SkillTest